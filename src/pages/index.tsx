import Head from 'next/head'
import styles from '@/styles/Home.module.scss'
import Layout from '@/components/layout/layout'
import type { GetServerSideProps } from 'next'
import Link from 'next/link'
import SearchInput from '@/components/posts/search-input'
import Pagination from '@/components/pagination'

type TPost = {
  userId: number
  id: number
  title: string
  body: string
}

type TProps = {
  posts: TPost[]
  totalPages: number
  itemsPerPage: number
}

export default function Home({ posts, totalPages, itemsPerPage }: TProps) {
  return (
    <>
      <Head>
        <title>Posts</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Layout>
        <div className={styles.container}>
          <h1 className={styles.title}>Posts</h1>
          <SearchInput />
          <div className={styles.posts}>
            {posts.map(post => (
              <div key={post.id} className={styles.post}>
                <p className={styles.post__title}>Post â„–{post.id}</p>
                <Link className={styles.post__link} href={`/post/${post.id}`}>
                  {post.title}
                </Link>
              </div>
            ))}
          </div>
          <div className={styles.pagination}>
            <Pagination totalPages={totalPages} itemsPerPage={itemsPerPage} />
          </div>
        </div>
      </Layout>
    </>
  )
}

export const getServerSideProps = (async context => {
  console.log(context)
  const title_like = context.query.title_like
  const page = context.query.page
  const res = await fetch('https://jsonplaceholder.typicode.com/posts')
  const posts: TPost[] = await res.json()
  let filteredPosts = posts
  if (typeof title_like === 'string') {
    filteredPosts = posts.filter(post => post.title.includes(title_like))
  }

  const itemsPerPage = 10
  const totalPages = filteredPosts.length

  const selectPosts = (
    posts: TPost[],
    currentPage: string,
    itemsPerPage: number
  ) => {
    if (currentPage === '1') {
      return posts.slice(0, itemsPerPage)
    }
    const start = (Number(currentPage) - 1) * itemsPerPage
    const end = start + itemsPerPage
    return posts.slice(start, end)
  }

  if (typeof page === 'string') {
    filteredPosts = selectPosts(filteredPosts, page, itemsPerPage)
  }
  return { props: { posts: filteredPosts, totalPages, itemsPerPage } }
}) satisfies GetServerSideProps<{ posts: TPost[] }>
